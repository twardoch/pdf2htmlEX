This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
reference/
  reference.md
.gitignore
build_prototype.sh
pdf2htmlex.rb
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="reference/reference.md">
<clitools>
Jules
-------- Python --------
✅ python3: Python 3.12.11
✅ python: Python 3.12.11
✅ pip: pip 25.1.1 from /home/jules/.pyenv/versions/3.12.11/lib/python3.12/site-packages/pip (python 3.12)
✅ pipx: 1.4.3
✅ poetry: Poetry (version 2.1.3)
✅ uv: uv 0.7.13
✅ black: black, 25.1.0 (compiled: yes)
✅ mypy: mypy 1.16.1 (compiled: yes)
✅ pytest: pytest 8.4.0
✅ ruff: ruff 0.12.0
✅ pyenv: available
  system
  3.10.18
  3.12.11 (set by /home/jules/.pyenv/version)

-------- NodeJS --------
✅ node: v22.16.0 *
  v18.20.8 *
  v20.19.2 *
  → v22.16.0 *
  system *
✅ nvm: available
✅ npm: 11.4.2
✅ yarn: 1.22.22
✅ pnpm: 10.12.1
✅ eslint: v9.29.0
✅ prettier: 3.5.3
✅ chromedriver: ChromeDriver 137.0.7151.70
  (dfa4dc56b2ahb56eb2a14cad006ea5e68c60d5de-refs/branch-heads/7151@{#1875})

-------- Java --------
✅ java: openjdk version "21.0.7" 2025-04-15
  OpenJDK Runtime Environment (build 21.0.7+6-Ubuntu-0ubuntu124.04)
  OpenJDK 64-Bit Server VM (build 21.0.7+6-Ubuntu-0ubuntu124.04, mixed mode, sharing)
✅ maven: Apache Maven 3.9.10 (5f519b97e9448438d878815739f519b2eade0a91d)
✅ gradle: Gradle 8.8

-------- Go --------
✅ go: go version go1.24.3 linux/amd64

-------- Rust --------
✅ rustc: rustc 1.87.0 (17067e9ac 2025-05-09)
✅ cargo: cargo 1.87.0 (99624be96 2025-05-06)

-------- C/C++ Compilers --------
✅ clang: Ubuntu clang version 18.1.3 (1ubuntu1)
✅ gcc: gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0
✅ cmake: cmake version 3.28.3
✅ ninja: 1.11.1
✅ conan: Conan version 2.17.0

-------- Docker --------
✅ docker: Docker version 28.2.2, build e6534b4
✅ docker: Docker Compose version v2.36.2

-------- Other Utilities --------
✅ awk: GNU Awk 5.2.1, API 3.2, PMA Avon 8-g1, (GNU MPFR 4.2.1, GNU MP 6.3.0)
✅ curl: curl 8.5.0 (x86_64-pc-linux-gnu) libcurl/8.5.0 OpenSSL/3.0.13 zlib/1.3 brotli/1.1.0 zstd/1.5.5 libidn2/2.3.7 libpsl/0.21.2 (+libidn2/2.3.7) libssh/0.10.6/openssl/zlib nghttp2/1.59.0 librtmp/2.3 OpenLDAP/2.6.7
✅ git: git version 2.49.0
✅ grep: grep (GNU grep) 3.11
✅ gzip: gzip 1.12
✅ jq: jq-1.7
✅ make: GNU Make 4.3
✅ rg: ripgrep 14.1.0
✅ sed: sed (GNU sed) 4.9
✅ tar: tar (GNU tar) 1.35
✅ tmux: tmux 3.4
✅ yq: yq 0.0.0
</clitools>


<tree>
pdf2htmlEX/
├── archive
│   ├── build_for_ppa.py
│   ├── createDebianPackage
│   └── debian
│       ├── changelog
│       ├── compat
│       ├── control
│       ├── copyright
│       ├── dirs
│       ├── pdf2htmlex.NEWS
│       ├── pdf2htmlex.README
│       ├── pdf2htmlex.TODO
│       ├── rules
│       └── source
│           └── format
├── AUTHORS
├── buildScripts
│   ├── buildFontforge
│   ├── buildInstallLocallyAlpine
│   ├── buildInstallLocallyApt
│   ├── buildInstallLocallyDnf
│   ├── buildPdf2htmlEX
│   ├── buildPoppler
│   ├── createAlpineTarFile
│   ├── createAppImage
│   ├── createContainerAlpineImageFromTarFile
│   ├── createContainerUbuntuImageFromDeb
│   ├── createDebianPackage
│   ├── createImagesAlpine
│   ├── createImagesApt
│   ├── getBuildToolsAlpine
│   ├── getBuildToolsApt
│   ├── getBuildToolsDnf
│   ├── getDevLibrariesAlpine
│   ├── getDevLibrariesApt
│   ├── getDevLibrariesDnf
│   ├── getFontforge
│   ├── getPoppler
│   ├── installPdf2htmlEX
│   ├── listFilesByChangeTime
│   ├── PKGBUILD
│   ├── Readme.md
│   ├── reportEnvs
│   ├── runTests
│   ├── travisLinuxDoItAll
│   ├── uploadContainerImage
│   ├── uploadGitHubRelease
│   ├── uploadGitHubReleaseDSL
│   ├── uploadGitHubReleaseMessage
│   ├── uploadImages
│   └── versionEnvs
├── ChangeLog
├── CONTRIBUTING.md
├── INSTALL
├── LICENSE
├── LICENSE_GPLv3
├── patches
│   ├── fontforge-20170731-fixGDraw.patch
│   └── fontforge-20170731-fixGitVersion.patch
├── pdf2htmlEX
│   ├── 3rdparty
│   │   ├── closure-compiler
│   │   │   ├── compiler.jar
│   │   │   ├── COPYING
│   │   │   └── README
│   │   ├── PDF.js
│   │   │   ├── build.sh
│   │   │   ├── compatibility.js
│   │   │   ├── compatibility.min.js
│   │   │   └── LICENSE
│   │   └── yuicompressor
│   │       ├── LICENSE.TXT
│   │       └── yuicompressor-2.4.8.jar
│   ├── CMakeLists.txt
│   ├── logo
│   │   ├── design.svg
│   │   ├── LICENSE
│   │   ├── LICENSE_CC-BY-3.0
│   │   ├── notes.txt
│   │   ├── pdf2htmlEX-256x256.png
│   │   ├── pdf2htmlEX-64x64.png
│   │   ├── pdf2htmlEX.svg
│   │   └── update_png.sh
│   ├── pdf2htmlEX.1.in
│   ├── share
│   │   ├── base.css.in
│   │   ├── build_css.sh
│   │   ├── build_js.sh
│   │   ├── fancy.css.in
│   │   ├── LICENSE
│   │   ├── manifest
│   │   ├── pdf2htmlEX-64x64.png
│   │   └── pdf2htmlEX.js.in
│   ├── src
│   │   ├── ArgParser.cc
│   │   ├── ArgParser.h
│   │   ├── BackgroundRenderer
│   │   │   ├── BackgroundRenderer.cc
│   │   │   ├── BackgroundRenderer.h
│   │   │   ├── CairoBackgroundRenderer.cc
│   │   │   ├── CairoBackgroundRenderer.h
│   │   │   ├── SplashBackgroundRenderer.cc
│   │   │   └── SplashBackgroundRenderer.h
│   │   ├── Base64Stream.cc
│   │   ├── Base64Stream.h
│   │   ├── Color.cc
│   │   ├── Color.h
│   │   ├── CoveredTextDetector.cc
│   │   ├── CoveredTextDetector.h
│   │   ├── css_class_names.cmakelists.txt
│   │   ├── DrawingTracer.cc
│   │   ├── DrawingTracer.h
│   │   ├── HTMLRenderer
│   │   │   ├── draw.cc
│   │   │   ├── font.cc
│   │   │   ├── form.cc
│   │   │   ├── general.cc
│   │   │   ├── HTMLRenderer.h
│   │   │   ├── image.cc
│   │   │   ├── link.cc
│   │   │   ├── outline.cc
│   │   │   ├── state.cc
│   │   │   └── text.cc
│   │   ├── HTMLState.h
│   │   ├── HTMLTextLine.cc
│   │   ├── HTMLTextLine.h
│   │   ├── HTMLTextPage.cc
│   │   ├── HTMLTextPage.h
│   │   ├── Param.h
│   │   ├── pdf2htmlEX-config.h.in
│   │   ├── pdf2htmlEX.cc
│   │   ├── Preprocessor.cc
│   │   ├── Preprocessor.h
│   │   ├── StateManager.h
│   │   ├── StringFormatter.cc
│   │   ├── StringFormatter.h
│   │   ├── TmpFiles.cc
│   │   ├── TmpFiles.h
│   │   └── util
│   │       ├── const.cc
│   │       ├── const.h
│   │       ├── css_const.h.in
│   │       ├── encoding.cc
│   │       ├── encoding.h
│   │       ├── ffw.c
│   │       ├── ffw.h
│   │       ├── math.cc
│   │       ├── math.h
│   │       ├── mingw.cc
│   │       ├── mingw.h
│   │       ├── misc.cc
│   │       ├── misc.h
│   │       ├── namespace.h
│   │       ├── path.cc
│   │       ├── path.h
│   │       ├── SignalHandler.cc
│   │       ├── SignalHandler.h
│   │       ├── unicode.cc
│   │       └── unicode.h
│   └── test
│       ├── browser_tests
│       │   ├── basic_text
│       │   │   └── basic_text.html
│       │   ├── basic_text.pdf
│       │   ├── basic_text.tex
│       │   ├── fontfile3_opentype
│       │   │   └── fontfile3_opentype.html
│       │   ├── fontfile3_opentype.pdf
│       │   ├── geneve_1564
│       │   │   └── geneve_1564.html
│       │   ├── geneve_1564.pdf
│       │   ├── invalid_unicode_issue477
│       │   │   └── invalid_unicode_issue477.html
│       │   ├── invalid_unicode_issue477.pdf
│       │   ├── svg_background_with_page_rotation_issue402
│       │   │   └── svg_background_with_page_rotation_issue402.html
│       │   ├── svg_background_with_page_rotation_issue402.pdf
│       │   ├── test_fail
│       │   │   └── THIS_FOLDER_SHOULD_BE_EMPTY
│       │   ├── test_fail.pdf
│       │   ├── test_fail.tex
│       │   ├── text_visibility
│       │   │   └── text_visibility.html
│       │   ├── text_visibility.pdf
│       │   ├── with_form
│       │   │   └── with_form.html
│       │   └── with_form.pdf
│       ├── browser_tests.py
│       ├── compareTestImages
│       ├── fancy.min.css
│       ├── installAutomaticTestSoftwareApt
│       ├── installAutomaticTestSoftwareDnf
│       ├── installManualTestSoftware
│       ├── old
│       │   ├── convert_to_woff.fontforge
│       │   └── test.py
│       ├── produceHtmlForBrowserTests
│       ├── README.md
│       ├── regenerateTest
│       ├── runLocalBrowserTests
│       ├── runLocalTestsPython
│       ├── runLocalTestsShell
│       ├── test_local_browser.py
│       ├── test_output
│       │   ├── 1-page.pdf
│       │   ├── 2-pages.pdf
│       │   ├── 3-pages.pdf
│       │   └── issue501
│       ├── test_output.py
│       ├── test_remote_browser.py
│       ├── test.py.in
│       └── testOutput
├── PopplerReleases.md
├── README.md
└── TODO

29 directories, 187 files
</tree>

<ref>

# Building pdf2htmlEX

Because of its intimate use of *specific* versions of both 
[Poppler](https://poppler.freedesktop.org/) and 
[FontForge](https://fontforge.org/en-US/),
cleanly building `pdf2htmlEX` is rather more complex than 
normal. 

The (shell) scripts in the [`buildScripts` directory](https://github.com/pdf2htmlEX/pdf2htmlEX/tree/master/buildScripts) help automate this mutli-stage process. 

For all but the most experienced programmers, we *strongly* encourage you 
to use these scripts to build `pdf2htmlEX`. 

### [∞](#downloading-precompiled-versions) Downloading precompiled versions

For most users, you *probably really want to simply* download one of the 
[precompiled versions of 
`pdf2htmlEX`](https://github.com/pdf2htmlEX/pdf2htmlEX/releases): 

- As a [Debian archive](Download-Debian-Archive)
- As an [Alpine tar archive](Download-Alpine-Tar-Archive)
- As an [AppImage](Download-AppImage)
- As a [Docker image](Download-Docker-Image)

# Environment

pdf2htmlEX can be built in any Unix-like environment:
* **GNU/Linux:**
  `pdf2htmlEX` is currently built and released inside Ubuntu
  (Bionic, Eoan, and Focal), Alpine 3.12 docker containers,
  as well as Ubuntu-Bionic on Travis, so `pdf2htmlEX` is
  *known* to build on any Debian based distribution.

  The current `buildScripts` assume the use of either `apt` 
  (Debian) or `apk` (Alpine) for (automatic) installation of
  all required dependencies. These scripts should be easily 
  modified for other distributions.
* **macOS**:
  While it should in principle be possible to build on macOS,
  unfortunately we currently have no access to a development/testing
  environment with which to ensure the `buildScripts` are
  adequately tuned to build on macOS.

  **NOTE** that the existing [`homebrew`](https://brew.sh/)
  [build script](https://github.com/Homebrew/homebrew-core/blob/master/Formula/pdf2htmlex.rb)
  is *not* up to date and will fail.

  *Offers of help and/or temporary access to development/testing
  machines would be greatly appreciated.*

* **Windows 10 with the [Windows Subsystem
  for Linux](https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux)**:

  The Debian(Apt) versions of our build scripts should build `pdf2htmlEX` (untested).

  The AppImage or Debian archive binary release objects *are* reputed to work.

* **Android**: Have a look at [Vilius Sutkus](https://github.com/ViliusSutkus89)'s [pdf2htmlEX-Android](https://github.com/ViliusSutkus89/pdf2htmlEX-Android).

# Building yourself

To build `pdf2htmlEX` on a Debian/Apt related machine, inside the root 
directory of a fresh clone of the 
[pdf2htmlEX/pdf2htmlEX](https://github.com/pdf2htmlEX/pdf2htmlEX) 
repository, type: 

```
    ./buildScripts/buildInstallLocallyApt
```

This will automatically install all required development tools and 
libraries, and then proceed to download and statically compile the 
required versions of both Poppler and FontForge before compiling and 
installing `pdf2htmlEX` into `/usr/local/bin`. 

**NOTE:** at the moment this will **only** work on machines with a 
[Debian](https://www.debian.org/) based distribution. such as 
[Ubuntu](https://ubuntu.com/), [Linux Mint](https://linuxmint.com/), etc. 

**NOTE:** there is currently an *experimental* build script, 
`./buildScripts/buildInstallLocallyAlpine`, for builds in Alpine 
environments. 

## [∞](#dependencies) Dependencies

The definitive list of build dependencies can be found in the following scripts:

1. [getBuildToolsAlpine](https://github.com/pdf2htmlEX/pdf2htmlEX/blob/master/buildScripts/getBuildToolsAlpine) for Alpine Linux
2. [getBuildToolsApt](https://github.com/pdf2htmlEX/pdf2htmlEX/blob/master/buildScripts/getBuildToolsApt) for Debian based systems
3. [getDevLibrariesAlpine](https://github.com/pdf2htmlEX/pdf2htmlEX/blob/master/buildScripts/getBuildToolsAlpine) for Alpine Linux
4. [getDevLibrariesApt](https://github.com/pdf2htmlEX/pdf2htmlEX/blob/master/buildScripts/getBuildToolsApt) for Debian based systems

## [∞](#build-options) Build options

To build `pdf2htmlEX` you require static versions of the Poppler and FontForge libraries in specific 'well-known' locations.

An automatic build uses `cmake` to build all of Poppler, FontForge and `pdf2htmlEX`.

The definitive list of cmake build options can be found in the following scripts:

1. [buildFontforge](https://github.com/pdf2htmlEX/pdf2htmlEX/blob/master/buildScripts/buildFontforge)
2. [buildPdf2htmlEX](https://github.com/pdf2htmlEX/pdf2htmlEX/blob/master/buildScripts/buildPdf2htmlEX)
3. [buildPoppler](https://github.com/pdf2htmlEX/pdf2htmlEX/blob/master/buildScripts/buildPoppler)

# Why such a complex build system?

## [∞](#the-problem) The problem

To provide its full functionality, the `pdf2htmlEX` sources make direct 
use of source code and unexposed methods from both the Poppler and 
FontForge projects. Unfortunately the source code in the Poppler and 
FontForge projects that the `pdf2htmlEX` uses changes regularly.

This means that the `pdf2htmlEX` souce code *must* be updated regularly to 
match *specific releases* of both Poppler and FontForge. 

Unfortunately, the installed versions of both Poppler and FontForge in 
most Linux distributions, lag the official releases of both of these 
projects. Even worse few distributions install the same versions.

This means that it is nearly impossible for the `pdf2htmlEX` code to 
'predict' which version of Poppler or FontForge will be installed on a 
given user's machine. 

## [∞](#our-solution) Our solution

While we *could* keep multiple versions of the `pdf2htmlEX` source code, 
each version matched to a particular distribution's installed versions of 
Poppler and FontForge, this would be a logistic and testing 'nightmare'. 

Instead, when building `pdf2htmlEX`, we download specific versions of both 
the Poppler and FontForge sources (usually the most recent), and then 
compile *static* versions of the Poppler and FontForge libraries which are 
then *statically* linked into the `pdf2htmlEX` binary. 

This means that the `pdf2htmlEX` binary is completely independent of any 
locally installed versions of either Poppler or FontForge.

However, to get the matched versions of Poppler and FontForge and then 
compile them statically, *our* build process becomes much more complex 
than a "simple", `configure, make, make install` cycle. 

Hence there are a large number of shell scripts in the [`buildScripts`
directory](https://github.com/pdf2htmlEX/pdf2htmlEX/tree/master/buildScripts)
each of which automates one 'simple' step in the overall build process. 

## [∞](#) 
</ref>

1. **Explore the project** – analyse the `buildScripts` directory to extract the exact Poppler & FontForge versions and build flags that `pdf2htmlEX` expects.

2. **Map every Linux‑centric step to macOS/Homebrew equivalents** – work out which bits can reuse existing Homebrew formulae (`poppler`, `fontforge`, etc.) and where private “resource” blocks are required.

3. **Prototype a clean, reproducible universal build** – script two native builds (arm64 and x86_64) under Homebrew and merge them with `lipo`, or use CMake’s `CMAKE_OSX_ARCHITECTURES="x86_64;arm64"` where feasible.

4. **Author a modern Formula (`pdf2htmlex.rb`) inside a new tap** created with `brew tap‑new`, add an automated test block, then run `brew audit --strict --new-formula` until it is clean.
5. **Bottle and publish** – use `brew install --build-bottle`, `brew bottle`, commit bottles, and set up a GitHub Actions workflow that pushes updates whenever the upstream tag or Poppler/FontForge revisions change.

The detailed play‑book follows.

---

## [∞](#1set-up-the-local-research-environment) 1 – Set up the local research environment

### [∞](#11-spawn-fresh-macos-runners) 1.1 Spawn fresh macOS runners

- Use `brew doctor && brew update --force --quiet` to ensure the host is pristine.
- Install Rosetta 2 on Apple Silicon if you plan to run Intel‐only tools during the analysis phase. ([formulae.brew.sh][1])

### [∞](#12-fetch-sources-and-history) 1.2 Fetch sources and history

```bash
git clone https://github.com/pdf2htmlEX/pdf2htmlEX
cd pdf2htmlEX
git submodule update --init --recursive
```

- Keep the clone handy so the assistant can run static analysis tools (`clang‑tidy`, `ruff`, `mypy`, etc.).

### [∞](#13-inventory-all-build-helpers) 1.3 Inventory all build helpers

Run a Python one‑liner that walks `buildScripts/` and prints every `build*`, `get*` and `create*` script; this seeds a to‑do list for porting.

```python
import pathlib, re, itertools, textwrap, shutil
...
```

Use **Python 3.12**, `rich` for pretty tables, and `ruff` → `black` for autofixing generated helper scripts, matching Adam’s coding standards.

---

## [∞](#2reverseengineer-the-exact-dependency-stack) 2 – Reverse‑engineer the exact dependency stack

### [∞](#21-parse-buildscripts-for-hardcoded-versions) 2.1 Parse buildScripts for hard‑coded versions

- `buildPoppler`, `buildFontforge`, `versionEnvs` hold authoritative `POPPLER_VERSION` and `FONTFORGE_VERSION` variables.
- Capture them into a JSON manifest so later steps can compare with the latest Homebrew core versions (`poppler` is updated almost weekly ([formulae.brew.sh][2]), `fontforge` monthly ([formulae.brew.sh][3])).

### [∞](#22-decide-system-formula-vs-vendored-resource) 2.2 Decide: system formula vs vendored resource

- If upstream’s required Poppler/FontForge tags **match** Homebrew, reuse the core formulae and declare them as `depends_on "poppler"` / `depends_on "fontforge"`.
- If they differ, create **resource** blocks that fetch and build the frozen revisions exactly as the Linux scripts do. The old, removed formula (see 2018 commit 995cc7e ([trac.macports.org][4])) is a useful template for embedding those resources.

### [∞](#23-identify-auxiliary-runtime-deps) 2.3 Identify auxiliary runtime deps

Look through `getBuildToolsApt` and map each Debian package to its Homebrew analogue (e.g. `pkg-config`, `glib`, `cairo`, `libpng`, `jpeg`, etc.).

---

## [∞](#3craft-a-universal-build-that-works-on-both-cpus) 3 – Craft a universal build that works on both CPUs

### [∞](#31-straightforward-route-single-cmake-pass) 3.1 Straightforward route: single CMake pass

- Invoke CMake with

  ```bash
  cmake -B build -G Ninja \
        -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
        -DENABLE_UNIVERSAL_BINARY=ON
  ```

  This matches Apple’s guidance on Universal 2 binaries ([developer.apple.com][5]).

- If CMake chokes on dual‑arch static libs (common with Poppler), fall back to **two separate builds** and stitch the resulting binaries with `lipo -create` ([github.com][6]).

### [∞](#32-stresstest) 3.2 Stress‑test

- Run `pdf2htmlEX --version` and convert a small PDF on both host architectures under Rosetta to verify the binary really is fat.
- Optional: push sample PDFs through the upstream Python test‑suite in `test/runLocalTestsPython`.

---

## [∞](#4write-the-homebrew-formula-skeleton) 4 – Write the Homebrew formula skeleton

### [∞](#41-bootstrap-a-tap) 4.1 Bootstrap a tap

```bash
brew tap-new yourname/pdf2htmlex
cd $(brew --repository yourname/pdf2htmlex)
```

Template files are generated for you ([docs.brew.sh][7]).

### [∞](#42-use-brew-create---tap-yournamepdf2htmlex-tarball-to-generate-formulapdf2htmlexrb-then-handedit) 4.2 Use `brew create --tap yourname/pdf2htmlex <tarball>` to generate `Formula/pdf2htmlex.rb`, then hand‑edit:

- **desc**, **homepage**, **url**, **sha256** → pull from the latest GitHub release ([github.com][8]).
- **license** `"GPL-3.0-or-later"` (see upstream `LICENSE_GPLv3`).
- **depends_on** system libraries or resource blocks from § 2.
- **def install**

  ```ruby
  system "cmake", "-S", ".", "-B", "build",
         *std_cmake_args, "-DCMAKE_OSX_ARCHITECTURES=#{Hardware::CPU.universal_archs.join(";")}"
  system "cmake", "--build", "build"
  bin.install "build/pdf2htmlEX"
  ```

- Add `test do` that converts a one‑page PDF and checks the HTML contains the word “pdf2htmlEX”.

### [∞](#43-lint--audit) 4.3 Lint & audit

Run

```bash
brew audit --strict --new-formula Formula/pdf2htmlex.rb
brew install --build-from-source pdf2htmlex
```

until both succeed without warnings ([docs.brew.sh][9]).

---

## [∞](#5bottle-and-distribute) 5 – Bottle and distribute

### [∞](#51-build-bottles) 5.1 Build bottles

```bash
brew install --build-bottle pdf2htmlex
brew bottle pdf2htmlex
```

This emits `.tar.gz` bottles for each arch that Homebrew will later pour.

### [∞](#52-commit-bottles--update-formula) 5.2 Commit bottles & update formula

Follow the canonical bottle‑commit flow: add the `sha256 cellar:` lines to `pdf2htmlex.rb`, push, and tag a release on your tap.

### [∞](#53-continuous-delivery) 5.3 Continuous delivery

Create a **GitHub Actions** workflow (`macos‑latest`, `runs-on: macos-14`) that:

1. Checks out both `pdf2htmlEX` and the tap.
2. Re‑evaluates § 2 for new Poppler/FontForge tags weekly.
3. Re‑builds, bottles, and opens a PR against the tap if anything changed.
4. Runs `brew test-bot` to ensure arm64 & x86_64 stay green.

---

## [∞](#6validation-matrix) 6 – Validation matrix

| Step                      | Intel host | Apple Silicon host | CI (GitHub) |
| ------------------------- | ---------- | ------------------ | ----------- |
| `brew install pdf2htmlex` | ✅         | ✅ (native)        | ✅          |
| Convert PDF smoke‑test    | ✅         | ✅                 | ✅          |
| `brew audit` clean        | ✅         | ✅                 | ✅          |
| Bottle pouring            | ✅         | ✅                 | ✅          |

---

## [∞](#7pointers--references-for-the-assistant) 7 – Pointers & references for the assistant

- Upstream maintainers acknowledge the current Homebrew formula is stale ([github.com][10]) and users on macOS are currently blocked ([github.com][10]).
- The old Homebrew formula (removed in 2018) shows how resources were vendored ([trac.macports.org][4]).
- Homebrew documentation on taps ([docs.brew.sh][11]), formula‑cookbook ([docs.brew.sh][9]), acceptable formula rules ([docs.brew.sh][12]).
- Poppler ([formulae.brew.sh][2]) and FontForge ([formulae.brew.sh][3]) current formulae.
- Apple guidance on universal binaries ([developer.apple.com][5]).
- Community discussion about multi‑arch Homebrew builds ([github.com][6]).

Hand the plan above to your LLM assistant; it now has a **clear, tool‑by‑tool blueprint** to analyse the codebase, adapt the build for macOS, and publish a modern Homebrew tap that “just works” on both chips.

[1]: https://formulae.brew.sh/cask/fontforge?utm_source=chatgpt.com 'fontforge - Homebrew Formulae'
[2]: https://formulae.brew.sh/formula/poppler?utm_source=chatgpt.com 'poppler - Homebrew Formulae'
[3]: https://formulae.brew.sh/formula/fontforge?utm_source=chatgpt.com 'fontforge - Homebrew Formulae'
[4]: https://trac.macports.org/ticket/56803?utm_source=chatgpt.com "56803 (pdf2htmlex @0.11: doesn't build) - MacPorts"
[5]: https://developer.apple.com/documentation/apple-silicon/building-a-universal-macos-binary?utm_source=chatgpt.com 'Building a universal macOS binary | Apple Developer Documentation'
[6]: https://github.com/orgs/Homebrew/discussions/4985?utm_source=chatgpt.com 'Installing a Universal 2 binary · Homebrew · Discussion #4985'
[7]: https://docs.brew.sh/How-to-Create-and-Maintain-a-Tap?utm_source=chatgpt.com 'How to Create and Maintain a Tap - Homebrew Documentation'
[8]: https://github.com/pdf2htmlEX?utm_source=chatgpt.com 'pdf2htmlEX - GitHub'
[9]: https://docs.brew.sh/Formula-Cookbook?utm_source=chatgpt.com 'Formula Cookbook - Homebrew Documentation'
[10]: https://github.com/pdf2htmlEX/pdf2htmlEX/issues/159?utm_source=chatgpt.com 'how to install on macos · Issue #159 · pdf2htmlEX ... - GitHub'
[11]: https://docs.brew.sh/Taps?utm_source=chatgpt.com 'Taps (Third-Party Repositories) - Homebrew Documentation'
[12]: https://docs.brew.sh/Acceptable-Formulae?utm_source=chatgpt.com 'Acceptable Formulae - Homebrew Documentation'
</file>

<file path=".gitignore">
# macOS specific files
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk
.AppleDouble
.LSOverride

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# IDE files
.idea/
.vscode/
*.sublime-project
*.sublime-workspace
.project
.classpath
.settings/

# Common build and binary directories
bin/
build/
dist/
target/
out/
*.o
*.so
*.dylib
*.dll
*.exe

# Logs and databases
*.log
*.sql
*.sqlite
*.db

# Backup files
*~
*.bak
*.swp
*.swo

# Python specific
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Node.js specific
node_modules/
npm-debug.log
yarn-debug.log
yarn-error.log
.npm
.yarn-integrity

# Ruby specific
*.gem
*.rbc
/.config
/coverage/
/InstalledFiles
/pkg/
/spec/reports/
/spec/examples.txt
/test/tmp/
/test/version_tmp/
/tmp/
.rakeTasks

# Local environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
</file>

<file path="build_prototype.sh">
#!/bin/bash
set -ex

# --- Configuration ---
ARCHS="x86_64;arm64" # For CMAKE_OSX_ARCHITECTURES
INSTALL_PREFIX="$(pwd)/staging" # Install everything into a local staging area first
HOMEBREW_PREFIX_VAL="%%HOMEBREW_PREFIX%%" # Placeholder for actual Homebrew prefix

# Ensure paths to Homebrew-installed libraries are discoverable
export PKG_CONFIG_PATH="$HOMEBREW_PREFIX_VAL/lib/pkgconfig:$HOMEBREW_PREFIX_VAL/share/pkgconfig:/usr/lib/pkgconfig"
export CMAKE_PREFIX_PATH="$HOMEBREW_PREFIX_VAL:$CMAKE_PREFIX_PATH"
export PATH="$HOMEBREW_PREFIX_VAL/bin:$PATH"

# --- Build Poppler (Static) ---
echo "Building Poppler..."
# Assume Poppler source is in ./poppler-24.01.0
if [ ! -d poppler-24.01.0 ]; then
    echo "Poppler source directory not found!"
    exit 1
fi
cd poppler-24.01.0
mkdir -p build && cd build

cmake .. \
    -G Ninja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" \
    -DCMAKE_OSX_ARCHITECTURES="$ARCHS" \
    -DENABLE_UNSTABLE_API_ABI_HEADERS=OFF \
    -DBUILD_GTK_TESTS=OFF \
    -DBUILD_QT5_TESTS=OFF \
    -DBUILD_QT6_TESTS=OFF \
    -DBUILD_CPP_TESTS=OFF \
    -DBUILD_MANUAL_TESTS=OFF \
    -DENABLE_BOOST=OFF \
    -DENABLE_SPLASH=ON \
    -DENABLE_UTILS=OFF \
    -DENABLE_CPP=OFF \
    -DENABLE_GLIB=ON \
    -DENABLE_GOBJECT_INTROSPECTION=OFF \
    -DENABLE_GTK_DOC=OFF \
    -DENABLE_QT5=OFF \
    -DENABLE_QT6=OFF \
    -DENABLE_LIBOPENJPEG="none" \
    -DENABLE_DCTDECODER="libjpeg" \
    -DENABLE_CMS="none" \
    -DENABLE_LCMS=OFF \
    -DENABLE_LIBCURL=OFF \
    -DENABLE_LIBTIFF=OFF \
    -DWITH_TIFF=OFF \
    -DWITH_NSS3=OFF \
    -DENABLE_NSS3=OFF \
    -DENABLE_GPGME=OFF \
    -DENABLE_ZLIB=ON \
    -DENABLE_ZLIB_UNCOMPRESS=OFF \
    -DUSE_FLOAT=OFF \
    -DBUILD_SHARED_LIBS=OFF \
    -DRUN_GPERF_IF_PRESENT=OFF \
    -DEXTRA_WARN=OFF \
    -DWITH_JPEG=ON \
    -DWITH_PNG=ON \
    -DWITH_Cairo=ON

ninja install
cd ../..

# --- Build FontForge (Static) ---
echo "Building FontForge..."
# Assume FontForge source is in ./fontforge-20230101
if [ ! -d fontforge-20230101 ]; then
    echo "FontForge source directory not found!"
    exit 1
fi
cd fontforge-20230101
# Apply patches if any (example)
# git apply ../patches/fontforge-20170731-fixGDraw.patch
mkdir -p build && cd build

cmake .. \
    -G Ninja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" \
    -DCMAKE_OSX_ARCHITECTURES="$ARCHS" \
    -DBUILD_SHARED_LIBS:BOOL=OFF \
    -DENABLE_GUI:BOOL=OFF \
    -DENABLE_X11:BOOL=OFF \
    -DENABLE_NATIVE_SCRIPTING:BOOL=ON \
    -DENABLE_PYTHON_SCRIPTING:BOOL=OFF \
    -DENABLE_PYTHON_EXTENSION:AUTO=OFF \
    -DENABLE_LIBSPIRO:BOOL=OFF \
    -DENABLE_LIBUNINAMESLIST:BOOL=OFF \
    -DENABLE_LIBGIF:AUTO=OFF \
    -DENABLE_LIBJPEG:AUTO=ON \
    -DENABLE_LIBPNG:AUTO=ON \
    -DENABLE_LIBREADLINE:AUTO=OFF \
    -DENABLE_LIBTIFF:AUTO=ON \
    -DENABLE_WOFF2:AUTO=OFF \
    -DENABLE_DOCS:AUTO=OFF \
    -DENABLE_CODE_COVERAGE:BOOL=OFF \
    -DENABLE_DEBUG_RAW_POINTS:BOOL=OFF \
    -DENABLE_FONTFORGE_EXTRAS:BOOL=OFF \
    -DENABLE_MAINTAINER_TOOLS:BOOL=OFF \
    -DENABLE_TILE_PATH:BOOL=OFF \
    -DENABLE_WRITE_PFM:BOOL=OFF \
    -DENABLE_SANITIZER:ENUM="none" \
    -DENABLE_FREETYPE_DEBUGGER:PATH="" \
    -DSPHINX_USE_VENV:BOOL=OFF \
    -DREAL_TYPE:ENUM="double" \
    -DTHEME:ENUM="tango"

ninja install
cd ../..

# --- Build pdf2htmlEX ---
echo "Building pdf2htmlEX..."
# Assume pdf2htmlEX source is in current directory .
if [ ! -f CMakeLists.txt ] && [ -f pdf2htmlEX/CMakeLists.txt ]; then
    # If we are in the root of the cloned repo, cd into the subdir
    cd pdf2htmlEX
fi

# The CMakeLists.txt for pdf2htmlEX will need to find Poppler and FontForge
# We've installed them into $INSTALL_PREFIX, so we need to tell pdf2htmlEX's CMake
export PKG_CONFIG_PATH="$INSTALL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"
export CMAKE_PREFIX_PATH="$INSTALL_PREFIX:$CMAKE_PREFIX_PATH"

# For pdf2htmlEX/share scripts (build_css.sh, build_js.sh) to find java
# Assuming openjdk is installed by Homebrew and in PATH
# In a real formula, Formula["openjdk"].opt_prefix would be used
export JAVA_HOME="$HOMEBREW_PREFIX_VAL/opt/openjdk/libexec/openjdk.jdk/Contents/Home"
export PATH="$JAVA_HOME/bin:$PATH"

mkdir -p build && cd build
cmake .. \
    -G Ninja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX/final" \ # Final install location for pdf2htmlEX
    -DCMAKE_OSX_ARCHITECTURES="$ARCHS" \
    -DPOPPLER_STATIC=ON \
    -DFONTFORGE_STATIC=ON \
    -DCMAKE_PREFIX_PATH="$INSTALL_PREFIX;$CMAKE_PREFIX_PATH" \
    -DCMAKE_FIND_FRAMEWORK=NEVER \
    -DCMAKE_FIND_APPBUNDLE=NEVER

ninja install
cd ..
if [ -d pdf2htmlEX ]; then # go back to root if we cd'd
    cd ..
fi

echo "Build complete. Products in $INSTALL_PREFIX/final"
echo "Universal binary expected at $INSTALL_PREFIX/final/bin/pdf2htmlEX"

# --- Verification (conceptual) ---
# file "$INSTALL_PREFIX/final/bin/pdf2htmlEX"
# lipo -info "$INSTALL_PREFIX/final/bin/pdf2htmlEX"
</file>

<file path="pdf2htmlex.rb">
# typed: false
# frozen_string_literal: true

class Pdf2htmlex < Formula
  desc "Convert PDF to HTML without losing text or format"
  homepage "https://github.com/pdf2htmlEX/pdf2htmlEX"
  url "https://github.com/pdf2htmlEX/pdf2htmlEX/archive/refs/tags/v0.18.8.rc1.tar.gz"
  version "0.18.8.rc1"
  sha256 "###SHA256_SUM_PDF2HTMLEX###" # Placeholder, replace with actual checksum
  license "GPL-3.0-or-later"
  revision 1 # Increment if resources or build logic changes without a version bump

  # Universal build supported
  # bottle :unneeded # We will build from source, bottles can be added later

  depends_on "cmake" => :build
  depends_on "ninja" => :build
  depends_on "pkg-config" => :build
  depends_on "openjdk" => :build # For YUI Compressor and Closure Compiler

  depends_on "cairo"
  depends_on "fontconfig"
  depends_on "freetype"
  depends_on "gettext"
  depends_on "glib"
  depends_on "jpeg-turbo" # Homebrew standard for jpeg
  depends_on "libpng"
  depends_on "libtiff" # FontForge can use this
  depends_on "libxml2" # FontForge can use this
  depends_on "pango" # FontForge
  depends_on "harfbuzz" # FontForge

  resource "poppler" do
    url "https://poppler.freedesktop.org/poppler-24.01.0.tar.xz"
    sha256 "###SHA256_SUM_POPPLER###" # Placeholder
  end

  resource "fontforge" do
    url "https://github.com/fontforge/fontforge/archive/refs/tags/20230101.tar.gz"
    sha256 "###SHA256_SUM_FONTFORGE###" # Placeholder
  end

  def install
    # Staging prefix for our custom-built static libraries
    ENV.cxx11

    # Ensure Homebrew's libraries are found by pkg-config and cmake
    # This setup should be sufficient for most cases.
    ENV.prepend_path "PKG_CONFIG_PATH", Formula["freetype"].opt_lib/"pkgconfig"
    ENV.prepend_path "PKG_CONFIG_PATH", Formula["fontconfig"].opt_lib/"pkgconfig"
    # Add other specific opt_lib/pkgconfig paths if needed, but Homebrew's superenv usually handles this.

    # Remove march flags that can cause issues with older compilers or specific C++ features in dependencies
    ENV.remove "HOMEBREW_CFLAGS", / ?-march=\S*/
    ENV.remove "HOMEBREW_CXXFLAGS", / ?-march=\S*/


    archs = Hardware::CPU.universal_archs.join(";")
    staging_prefix = buildpath/"staging"

    # Centralized CMAKE_PREFIX_PATH for all Homebrew deps
    cmake_prefix_paths = [
      Formula["cairo"].opt_prefix,
      Formula["fontconfig"].opt_prefix,
      Formula["freetype"].opt_prefix,
      Formula["gettext"].opt_prefix,
      Formula["glib"].opt_prefix,
      Formula["jpeg-turbo"].opt_prefix,
      Formula["libpng"].opt_prefix,
      Formula["libtiff"].opt_prefix,
      Formula["libxml2"].opt_prefix,
      Formula["pango"].opt_prefix,
      Formula["harfbuzz"].opt_prefix,
    ].join(";")
    ENV["CMAKE_PREFIX_PATH"] = cmake_prefix_paths

    # Build Poppler
    resource("poppler").stage do
      mkdir "build" do
        system "cmake", "..",
               "-G", "Ninja",
               "-DCMAKE_BUILD_TYPE=Release",
               "-DCMAKE_INSTALL_PREFIX=#{staging_prefix}",
               "-DCMAKE_OSX_ARCHITECTURES=#{archs}",
               "-DCMAKE_PREFIX_PATH=#{ENV["CMAKE_PREFIX_PATH"]}",
               "-DCMAKE_FIND_FRAMEWORK=NEVER",
               "-DCMAKE_FIND_APPBUNDLE=NEVER",
               "-DENABLE_UNSTABLE_API_ABI_HEADERS=OFF",
               "-DBUILD_GTK_TESTS=OFF",
               "-DBUILD_QT5_TESTS=OFF",
               "-DBUILD_QT6_TESTS=OFF",
               "-DBUILD_CPP_TESTS=OFF",
               "-DBUILD_MANUAL_TESTS=OFF",
               "-DENABLE_BOOST=OFF",
               "-DENABLE_SPLASH=ON",
               "-DENABLE_UTILS=OFF",
               "-DENABLE_CPP=OFF",
               "-DENABLE_GLIB=ON",
               "-DENABLE_GOBJECT_INTROSPECTION=OFF",
               "-DENABLE_GTK_DOC=OFF",
               "-DENABLE_QT5=OFF",
               "-DENABLE_QT6=OFF",
               "-DENABLE_LIBOPENJPEG=none",
               "-DENABLE_DCTDECODER=libjpeg",
               "-DENABLE_CMS=none",
               "-DENABLE_LCMS=OFF",
               "-DENABLE_LIBCURL=OFF",
               "-DENABLE_LIBTIFF=OFF",
               "-DWITH_TIFF=OFF",
               "-DWITH_NSS3=OFF",
               "-DENABLE_NSS3=OFF",
               "-DENABLE_GPGME=OFF",
               "-DENABLE_ZLIB=ON",
               "-DENABLE_ZLIB_UNCOMPRESS=OFF",
               "-DUSE_FLOAT=OFF",
               "-DBUILD_SHARED_LIBS=OFF",
               "-DRUN_GPERF_IF_PRESENT=OFF",
               "-DEXTRA_WARN=OFF",
               "-DWITH_JPEG=ON",
               "-DWITH_PNG=ON",
               "-DWITH_Cairo=ON"
        system "ninja", "install"
      end
    end

    # Build FontForge
    resource("fontforge").stage do
      mkdir "build" do
        # FontForge needs to find the Poppler we just built in staging_prefix
        fontforge_cmake_prefix_path = "#{staging_prefix};#{ENV["CMAKE_PREFIX_PATH"]}"
        system "cmake", "..",
               "-G", "Ninja",
               "-DCMAKE_BUILD_TYPE=Release",
               "-DCMAKE_INSTALL_PREFIX=#{staging_prefix}",
               "-DCMAKE_OSX_ARCHITECTURES=#{archs}",
               "-DCMAKE_PREFIX_PATH=#{fontforge_cmake_prefix_path}",
               "-DCMAKE_FIND_FRAMEWORK=NEVER",
               "-DCMAKE_FIND_APPBUNDLE=NEVER",
               "-DBUILD_SHARED_LIBS=OFF",
               "-DENABLE_GUI=OFF",
               "-DENABLE_X11=OFF",
               "-DENABLE_NATIVE_SCRIPTING=ON",
               "-DENABLE_PYTHON_SCRIPTING=OFF",
               "-DENABLE_PYTHON_EXTENSION=OFF",
               "-DENABLE_LIBSPIRO=OFF",
               "-DENABLE_LIBUNINAMESLIST=OFF",
               "-DENABLE_LIBGIF=OFF",
               "-DENABLE_LIBJPEG=ON",
               "-DENABLE_LIBPNG=ON",
               "-DENABLE_LIBREADLINE=OFF",
               "-DENABLE_LIBTIFF=ON",
               "-DENABLE_WOFF2=OFF",
               "-DENABLE_DOCS=OFF",
               "-DENABLE_CODE_COVERAGE=OFF",
               "-DENABLE_DEBUG_RAW_POINTS=OFF",
               "-DENABLE_FONTFORGE_EXTRAS=OFF",
               "-DENABLE_MAINTAINER_TOOLS=OFF",
               "-DENABLE_TILE_PATH=OFF",
               "-DENABLE_WRITE_PFM=OFF",
               "-DENABLE_SANITIZER=none",
               "-DENABLE_FREETYPE_DEBUGGER=",
               "-DSPHINX_USE_VENV=OFF",
               "-DREAL_TYPE=double",
               "-DTHEME=tango"
        system "ninja", "install"
      end
    end

    # Configure pdf2htmlEX build
    ENV.prepend_path "PKG_CONFIG_PATH", "#{staging_prefix}/lib/pkgconfig"
    # CMAKE_PREFIX_PATH for pdf2htmlEX needs our staging_prefix and the general Homebrew paths
    pdf2htmlex_cmake_prefix_path = "#{staging_prefix};#{ENV["CMAKE_PREFIX_PATH"]}"


    ENV["JAVA_HOME"] = Formula["openjdk"].opt_prefix

    # pdf2htmlEX source is in the root of the buildpath (after url.stage)
    # It has a pdf2htmlEX subdirectory which contains the main CMakeLists.txt
    # The main tarball extracts to pdf2htmlEX-0.18.8.rc1, so cd into that.
    cd buildpath/name do # 'name' is a special var in Homebrew for the extracted dir name
      cd "pdf2htmlEX" do # The actual sources are in a subdirectory
        mkdir "build" do
          system "cmake", "..",
                 "-G", "Ninja",
                 "-DCMAKE_BUILD_TYPE=Release",
                 "-DCMAKE_INSTALL_PREFIX=#{prefix}",
                 "-DCMAKE_OSX_ARCHITECTURES=#{archs}",
                 "-DCMAKE_PREFIX_PATH=#{pdf2htmlex_cmake_prefix_path}",
                 "-DCMAKE_FIND_FRAMEWORK=NEVER",
                 "-DCMAKE_FIND_APPBUNDLE=NEVER"
          system "ninja", "install"
        end
      end
    end
  end

  test do
    (testpath/"test.pdf").write <<~EOS
      %PDF-1.4
      1 0 obj<</Type/Catalog/Pages 2 0 R>>endobj
      2 0 obj<</Type/Pages/Kids[3 0 R]/Count 1>>endobj
      3 0 obj<</Type/Page/MediaBox[0 0 612 792]/Resources<</Font<</F1 4 0 R>>>>/Contents 5 0 R>>endobj
      4 0 obj<</Type/Font/Subtype/Type1/BaseFont/Helvetica>>endobj
      5 0 obj<</Length 100>>stream
      BT /F1 24 Tf 100 700 Td (pdf2htmlEX test) Tj ET
      endstream
      endobj
      xref
      0 6
      0000000000 65535 f
      0000000009 00000 n
      0000000052 00000 n
      0000000101 00000 n
      0000000191 00000 n
      0000000242 00000 n
      trailer<</Size 6/Root 1 0 R>>
      startxref
      357
      %%EOF
    EOS

    system bin/"pdf2htmlEX", testpath/"test.pdf"
    assert_predicate testpath/"test.html", :exist?, "test.html should be created"
    assert_match "pdf2htmlEX test", (testpath/"test.html").read, "Output HTML should contain text from PDF"
    assert_match "pdf2htmlEX", (testpath/"test.html").read, "Output HTML should mention pdf2htmlEX"
  end
end
</file>

</files>
