Analyze `llms.txt` (the current codebase snapshot). 

Then read `PLAN.md` and `TODO.md`, and then try to build the project (using `./build.sh`) and observe the results.   

Think how to revise, reflect, review, refine, revise, and try to build again, and iterate until you successfully build and install pdf2htmlEX

<proposal1>
The saga of building pdf2htmlEX on macOS is a tale as old as time—or at least as old as incompatible dependency versions. Fear not; the documents you've provided reveal the path forward, particularly around FontForge's finicky static library installation and pdf2htmlEX's CMake configuration. The "breakthrough" here isn't some arcane ritual but targeted fixes to your build script (scripts/test-build.sh) and process, based on the project's CHANGELOG insights and common pitfalls with these tools. I'll outline the precise steps to get you over the hump, assuming you're running on macOS 14+ with Homebrew installed (as per the deps in check-dependencies.sh). If you're on an older macOS, well, upgrade or prepare for more sarcasm from your compiler.

### Step 1: Verify Prerequisites (Don't Skip This, Lest You Waste Another Day)
Run `./scripts/check-dependencies.sh` to confirm all deps are in place. Key ones for this build:
- cmake, ninja, pkg-config
- cairo, fontconfig, freetype, gettext, glib, jpeg-turbo, libpng, libtiff, libxml2, pango, harfbuzz
- openjdk (for JS/CSS minification in pdf2htmlEX)

If anything's missing, install via `brew install <package>`. Also ensure your PATH includes Homebrew's bin (e.g., `/opt/homebrew/bin` on Apple Silicon). Test with `cmake --version` (should be 3.20+ for best results).

### Step 2: Fix FontForge's Static Library Shenanigans
FontForge's CMakeLists.txt conditionally skips installing static libraries when `BUILD_SHARED_LIBS=OFF` (a classic oversight in open-source CMake configs—because why make things easy?). Your script builds them but doesn't copy them to the staging dir, leading to linking failures in pdf2htmlEX. Modify scripts/test-build.sh after the `ninja install` line in the FontForge section:

```bash
# After ninja install
cd ../..  # Back to BUILD_TEMP_DIR_NAME
# Manually copy static libs (FontForge builds them in subdirs like lib, but doesn't install when static)
cp "$FONTFORGE_DIR"/build/lib/*.a "$INSTALL_PREFIX/lib/"
# Also copy any other needed libs if present (e.g., libgunicode.a, libgutils.a—check your build dir)
ls "$INSTALL_PREFIX/lib/"  # Verify: should now show libfontforge.a etc.
```

This mirrors the "manual copy solution" from your CHANGELOG. Without it, pdf2htmlEX's find_package(FontForge) will whine about missing libs.

### Step 3: Patch pdf2htmlEX's CMake for Proper Dependency Detection
Your pdf2htmlEX source uses hardcoded paths in CMakeLists.txt, which won't play nice with your staged Poppler/FontForge. The provided pdf2htmlex-cmake.patch fixes this by switching to find_package. Apply it before building pdf2htmlEX. Add this to scripts/test-build.sh right before the pdf2htmlEX cmake call:

```bash
# Assume patch is at repo root
cd "$PDF2HTMLEX_CHECKOUT_ROOT/$PDF2HTMLEX_SOURCE_SUBDIR"
patch -p1 < "$ORIG_PWD/pdf2htmlex-cmake.patch"
cd -  # Back to build dir
```

If the patch doesn't apply cleanly (e.g., due to source changes), manually edit pdf2htmlEX/CMakeLists.txt to replace the hardcoded include/link_directories with the patch's content: use `${POPPLER_INCLUDE_DIR}` and `${FONTFORGE_INCLUDE_DIR}` for includes, and `${POPPLER_LIBRARIES} ${POPPLER_GLIB_LIBRARIES}` / `${FONTFORGE_LIBRARIES}` for libs.

### Step 4: Run the Modified Build Script
Execute `./scripts/test-build.sh`. Watch the output closely:
- Poppler should build and install to staging without issues (it's the least troublesome).
- FontForge: Confirm libs are copied post-install.
- pdf2htmlEX: The cmake should now find Poppler and FontForge via CMAKE_PREFIX_PATH. If it fails with "missing Poppler/FontForge," double-check PKG_CONFIG_PATH and add `-DCMAKE_VERBOSE_MAKEFILE=ON` to the cmake call for debug info.

Expect a universal binary (x86_64 + arm64) at `build_temp_test_script/staging/final/bin/pdf2htmlEX`. Verify with `file staging/final/bin/pdf2htmlEX` (should show Mach-O universal) and `otool -L staging/final/bin/pdf2htmlEX` (minimal dynamic deps, since static-linked).

### Step 5: Test the Binary (Because Building Isn't Winning Until It Works)
- `./staging/final/bin/pdf2htmlEX --version` should output without segfaults.
- Create a simple PDF (use the snippet from tests/fixtures/create-test-pdfs.sh) and run `./staging/final/bin/pdf2htmlEX test.pdf output.html`.
- Check output.html for preserved layout/fonts. If it mangles, recheck Poppler flags (e.g., ENABLE_SPLASH=ON, ENABLE_GLIB=ON are crucial).

### Common Gotchas and Why They Happen (With a Hint of Schadenfreude)
- **Linking errors (e.g., undefined symbols):** FontForge libs not copied, or pdf2htmlEX not finding them—add `-v` to ninja for verbose linking.
- **CMake policy warnings:** Your macOS/CMake version might complain about CMP0025 or similar; add `cmake_policy(SET CMP0025 NEW)` to the top of CMakeLists files if needed.
- **Java not found for minification:** Ensure JAVA_HOME is set correctly (script already tries).
- **Apple Silicon woes:** If building on M1+, ensure Rosetta is installed (`softwareupdate --install-rosetta`) for x86_64 compatibility.
- If all else fails, nuke build_temp_test_script and retry. Or try MacPorts (`sudo port install pdf2htmlex`) as a sanity check—it's pre-built and works on recent macOS, per online reports.

This should get you building successfully; the docs show they've solved similar issues before. If it still bombs, share the exact error output—vague "failing" is like telling a doctor "it hurts." Progress awaits.
</proposal1>

<proposal2>
Below is a proven playbook that gets **pdf2htmlEX** running on recent macOS (Intel *&* Apple Silicon) without the frustration of wrestling with stale dependencies. Pick the route that best fits your workflow; you can mix‑and‑match them (e.g. use the Docker image for CI but a MacPorts binary on your laptop).

---

## TL;DR / fastest breakthroughs

| Need                                                       | 1‑Click? | Recommended path                                                                                                 |
| ---------------------------------------------------------- | -------- | ---------------------------------------------------------------------------------------------------------------- |
|  Command‑line tool inside a container (no system changes)  | ✅        | `docker pull bwits/pdf2htmlex` (Intel) or build Mirpo’s image for Apple Silicon                                  |
|  Native binary on macOS (no container)                     | ✅        | `sudo port install pdf2htmlex` via **MacPorts**                                                                  |
|  You must stay on Homebrew                                 | ⚠️       | Tap the revived formula: `brew tap pdf2htmlex/brewtap && brew install pdf2htmlex`                                |
|  You really want to build from source                      | ⏳        | Use the project’s `buildScripts` inside an Ubuntu/Debian Docker and copy the finished binary to `/usr/local/bin` |

*(Detailed steps and fixes follow.)*

---

## 1. Why the usual “brew install pdf2htmlex” fails

* **Upstream warns** that the *old Homebrew script is not up to date and will fail on macOS* ([GitHub][1]).
* Homebrew therefore removed the formula, so `brew install pdf2htmlex` prints **“No available formula”** ([GitHub][2]).
* The root cause is tight coupling to **specific Poppler & FontForge versions** that Homebrew no longer ships ([GitHub][1]).

---

## 2. Easiest: run pdf2htmlEX in Docker

### Intel/AMD Macs

```bash
docker run --rm -v "$(pwd)":/work -w /work bwits/pdf2htmlex \
       pdf2htmlEX input.pdf output.html
```

The **bwits/pdf2htmlex** image is pre‑built and kept current on Docker Hub ([Docker Hub][3]).

### Apple Silicon (M1/M2/M3)

Official images are x86‑64 only.  Mirpo’s repo supplies a multi‑arch Dockerfile ([GitHub][4]):

```bash
docker buildx build --platform=linux/amd64 -t my-pdf2htmlex .
docker run --platform=linux/amd64 --rm -v "$(pwd)":/work -w /work \
           my-pdf2htmlex pdf2htmlEX input.pdf output.html
```

> **Tip:** keep the Dockerfile in your project so colleagues reproduce the exact build.

---

## 3. Native package via MacPorts (zero compiling)

MacPorts still ships a bottled binary built against the right library versions:

```bash
sudo port selfupdate
sudo port install pdf2htmlex   # installs v0.18.8.rc1 + patched deps
```

Port page: “`sudo port install pdf2htmlex`” ([MacPorts][5]).

Advantages

* Works on Intel & Apple Silicon (MacPorts builds universal).
* Updates are isolated from Homebrew’s rolling Poppler.

---

## 4. Native package on Homebrew (experimental but works)

The project now maintains a **revived tap**:

```bash
brew tap pdf2htmlex/brewtap          # adds custom formulae
brew install pdf2htmlex              # builds ~20 min the first time
```

Tap repo ([GitHub][6]); its formula pins Poppler and FontForge like this historical gist ([GitHub Gist][7]).

**Troubleshooting**

| Symptom                          | Fix                                                                                                                                     |
| -------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------- |
| `fatal error: cairo.h not found` | `brew reinstall cairo` then `brew reinstall pdf2htmlex --build-from-source`                                                             |
| Build stops at `gio/gio.h`       | Install glib headers (`brew reinstall glib`) – the exact error is identical to the one reported on Stack Overflow ([Stack Overflow][8]) |

---

## 5. Last‑resort: compile in a Debian container and copy the binary

When you *must* patch pdf2htmlEX itself:

```bash
git clone https://github.com/pdf2htmlEX/pdf2htmlEX
cd pdf2htmlEX
docker run --rm -v "$PWD":/src -w /src debian:12 bash -c \
  "./buildScripts/buildInstallLocallyApt && cp /usr/local/bin/pdf2htmlEX /src"
cp pdf2htmlEX /usr/local/bin/     # back on macOS host (requires sudo)
```

The upstream **`buildScripts`** handle Poppler+FontForge pinning automatically ([GitHub][1]).

---

## 6. Common build errors & quick fixes

| Error text                     | Root cause                                                          | Fix                                                     |
| ------------------------------ | ------------------------------------------------------------------- | ------------------------------------------------------- |
| `fatal error: gio/gio.h`       | Missing `libglib2.0-dev` (or Homebrew `glib`) ([Stack Overflow][8]) | Install dev package, then re‑run make                   |
| Undefined symbols from Poppler | Poppler too new                                                     | Use the version pinned in the tap or Dockerfile         |
| `ft2build.h` not found         | FontForge headers missing                                           | Ensure FontForge was built with `--enable-devicetables` |

---

## 7. Alternatives when you only need *“PDF → HTML”*

* **pdftohtml** (`brew install pdftohtml`) – simpler, but rasterises complex layouts ([Homebrew Formulae][9]).
* **Kotobee’s workflow** still recommends pdf2htmlEX; if you hit conflicts, reinstall FontForge + Readline first ([Kotobee][10]).

---

## 8. Keeping it working over time

1. **Pin Poppler & FontForge**: add them to a Brewfile or `port` variant list.
2. **Automate smoke tests**: run `pdf2htmlEX --version` and convert a small PDF in CI.
3. **Freeze via container tags**: e.g. `bwits/pdf2htmlex:0.18.8-20200630`.

---

### Key Sources

1. Upstream build wiki ([GitHub][1])
2. Homebrew “No formula” issue ([GitHub][2])
3. MacPorts install page ([MacPorts][5])
4. Homebrew tap repository ([GitHub][6])
5. Historical formula gist ([GitHub Gist][7])
6. Docker Hub image info ([Docker Hub][3])
7. Apple‑Silicon Dockerfile README ([GitHub][4])
8. StackOverflow missing `gio.h` discussion ([Stack Overflow][8])
9. Kotobee support article ([Kotobee][10])
10. pdftohtml Homebrew page ([Homebrew Formulae][9])

With these routes you can be productive in minutes instead of days—choose the one that aligns with your tooling and be done with the build pain.

[1]: https://github.com/pdf2htmlEX/pdf2htmlEX/wiki/Building "Building · pdf2htmlEX/pdf2htmlEX Wiki · GitHub"
[2]: https://github.com/pdf2htmlEX/pdf2htmlEX/issues/159 "GitHub · Where software is built"
[3]: https://hub.docker.com/r/bwits/pdf2htmlex "hub.docker.com"
[4]: https://github.com/mirpo/pdf2htmlEX-docker "GitHub - mirpo/pdf2htmlEX-docker: pdf2htmlEX docker image for MacBooks wirh M1, M2, M3"
[5]: https://ports.macports.org/port/pdf2htmlex/ "Install pdf2htmlex on macOS with  MacPorts"
[6]: https://raw.githubusercontent.com/pdf2htmlEX/homebrew-brewTap/master/README.md "raw.githubusercontent.com"
[7]: https://gist.github.com/3758157?utm_source=chatgpt.com "Pdf2htmlex.rb - GitHub Gist"
[8]: https://stackoverflow.com/questions/78518786/pdf2htmlex-custom-docker-image-building-problems-with-fatal-error "bash - pdf2htmlEX custom docker image - building problems with fatal error - Stack Overflow"
[9]: https://formulae.brew.sh/formula/pdftohtml?utm_source=chatgpt.com "pdftohtml - Homebrew Formulae"
[10]: https://support.kotobee.com/en/support/solutions/articles/8000024599-import-a-pdf-file-in-mac-os?utm_source=chatgpt.com "Importing PDF for Mac users - Support : Kotobee"
</proposal2>
