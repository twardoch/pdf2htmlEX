# Enhanced Build Process for pdf2htmlEX Formula
# This patch adds better error handling, progress indicators, and build validation

# Add these helper methods to the formula class:

def build_with_progress(component, &block)
  ohai "Building #{component}..."
  start_time = Time.now
  
  begin
    yield
    elapsed = Time.now - start_time
    ohai "✓ #{component} built successfully (#{elapsed.round(1)}s)"
  rescue => e
    onoe "✗ Failed to build #{component}: #{e.message}"
    raise BuildError, "#{component} build failed"
  end
end

def validate_build_stage(component, path)
  unless File.exist?(path)
    onoe "Build validation failed: #{component} artifact not found at #{path}"
    raise BuildError, "#{component} build validation failed"
  end
  ohai "✓ #{component} build validated"
end

def with_build_environment(&block)
  # Save original environment
  orig_cflags = ENV["CFLAGS"]
  orig_cxxflags = ENV["CXXFLAGS"]
  orig_ldflags = ENV["LDFLAGS"]
  
  # Set optimized build flags
  ENV.append "CFLAGS", "-O2 -fstack-protector-strong"
  ENV.append "CXXFLAGS", "-O2 -fstack-protector-strong"
  ENV.append "LDFLAGS", "-Wl,-rpath,@loader_path/../lib"
  
  yield
ensure
  # Restore original environment
  ENV["CFLAGS"] = orig_cflags
  ENV["CXXFLAGS"] = orig_cxxflags
  ENV["LDFLAGS"] = orig_ldflags
end

# Enhanced install method with progress tracking:
def install
  ohai "pdf2htmlEX Build Process Starting"
  ohai "Building for architectures: #{Hardware::CPU.universal_archs.join(", ")}"
  
  # Create build log
  build_log = buildpath/"build.log"
  
  with_build_environment do
    # Stage 1: Build Poppler
    build_with_progress("Poppler 24.01.0") do
      resource("poppler").stage do
        # ... existing poppler build code ...
      end
    end
    validate_build_stage("Poppler", staging_prefix/"lib/libpoppler.a")
    
    # Stage 2: Build FontForge
    build_with_progress("FontForge 20230101") do
      resource("fontforge").stage do
        # ... existing fontforge build code ...
      end
    end
    validate_build_stage("FontForge", staging_prefix/"lib/libfontforge.a")
    
    # Stage 3: Build pdf2htmlEX
    build_with_progress("pdf2htmlEX #{version}") do
      # ... existing pdf2htmlex build code ...
    end
    validate_build_stage("pdf2htmlEX", bin/"pdf2htmlEX")
  end
  
  # Final validation
  ohai "Running post-build validation..."
  system bin/"pdf2htmlEX", "--version"
  ohai "✓ Build completed successfully!"
rescue => e
  onoe "Build failed: #{e.message}"
  onoe "Check build log at: #{build_log}" if build_log.exist?
  raise
end

# Add rollback mechanism:
def install_with_rollback
  backup_dir = buildpath/".backup"
  
  begin
    # Backup existing installation if any
    if (prefix/"bin/pdf2htmlEX").exist?
      ohai "Backing up existing installation..."
      backup_dir.mkpath
      cp_r prefix, backup_dir/"prefix"
    end
    
    # Perform installation
    install
  rescue => e
    if backup_dir.exist?
      ohai "Rolling back to previous installation..."
      rm_rf prefix
      cp_r backup_dir/"prefix", prefix
    end
    raise
  ensure
    rm_rf backup_dir if backup_dir.exist?
  end
end

# Add caching support:
def cached_download(resource)
  cache_dir = buildpath/".cache"
  cache_dir.mkpath
  
  cached_file = cache_dir/"#{resource.name}-#{resource.version}.tar.gz"
  
  if cached_file.exist?
    ohai "Using cached #{resource.name}"
    resource.cached_download = cached_file
  else
    ohai "Downloading #{resource.name}..."
    resource.fetch
    cp resource.cached_download, cached_file
  end
end